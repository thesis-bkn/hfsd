# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.25.0
# source: query.py.sql
from typing import Optional

import sqlalchemy
import sqlalchemy.ext.asyncio

from database import models


GET_MODEL = """-- name: get_model \\:one
SELECT id, domain, name, base, ckpt FROM models
WHERE id = :p1 LIMIT 1
"""


class Querier:
    def __init__(self, conn: sqlalchemy.engine.Connection):
        self._conn = conn

    def get_model(self, *, id: str) -> Optional[models.Model]:
        row = self._conn.execute(sqlalchemy.text(GET_MODEL), {"p1": id}).first()
        if row is None:
            return None
        return models.Model(
            id=row[0],
            domain=row[1],
            name=row[2],
            base=row[3],
            ckpt=row[4],
        )


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def get_model(self, *, id: str) -> Optional[models.Model]:
        row = (await self._conn.execute(sqlalchemy.text(GET_MODEL), {"p1": id})).first()
        if row is None:
            return None
        return models.Model(
            id=row[0],
            domain=row[1],
            name=row[2],
            base=row[3],
            ckpt=row[4],
        )
