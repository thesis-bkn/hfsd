package templates

import (
	"fmt"

	"github.com/thesis-bkn/hfsd/templates/components"
	"github.com/thesis-bkn/hfsd/internal/entity"
)

type modelStatus int

const (
	Sampling modelStatus = iota
	Rating
	Finetuned
	Training
)

func (s modelStatus) ToolTip() string {
	switch s {
	case Sampling:
		return "This model is being sampling"
	case Rating:
		return "This model is sampled, please give feedback for finetuning"
	case Training:
		return "This model is being trained based on previous feedbacks"
	case Finetuned:
		return "This model is ready to be used to inference or further finetuning"
	}

	return ""
}

type ModelNode struct {
	ID     string
	Name   string
	Status modelStatus
	Parent *string
}

templ FinetuneView(models []ModelNode, domain entity.Domain) {
	@base() {
		@components.NavBar("finetune")
		@treeStyle()
		for i := range models {
			@swalStyle(&models[i])
		}
		<div class="max-w-max mx-auto fixed inset-x-0 top-10 capitalize text-2xl text-gray-900 dark:text-white">
			<p>{ domain.String() } Models</p>
		</div>
		<div class="flex overflow-x-auto justify-center mt-8">
			<ul class="tree">
				@tree(graph(models))
			</ul>
		</div>
	}
}

script swalFire(modelID string) {
    Swal.fire(
        { template: `#model-${modelID}` }
    ).then((result) => {
        if (result.isConfirmed) {
            fetch(`/api/finetune/${modelID}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
            }).then(response => {
                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Submit finetuning model successfully',
                        confirmButtonText: 'Continue'
                    }).then(_ => {
                        window.location.reload()
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: 'Failed to submit finetune new model.',
                        confirmButtonText: 'Continue'
                    });
                }
            })

        } else if (result.isDenied) {
            window.location.replace(`/inference?model=${modelID}`)
        }
    })
}

script redirectTo(url string) {
    window.location.replace(url)
}

templ tree(modelM map[string]*ModelNode, graphM map[string][]*ModelNode, curModel string) {
	<li>
		<button
			class={ "btn", "place-content-center", "duration-150", "ease-in-out","hover:bg-primary-accent-200",
                templ.KV("btn-accent", modelM[curModel].Status == Sampling),
                templ.KV("btn-secondary", modelM[curModel].Status == Rating),
                templ.KV("btn-primary", modelM[curModel].Status == Finetuned),
                templ.KV("btn-warning", modelM[curModel].Status == Training) }
			if modelM[curModel].Status == Finetuned {
				onClick={ swalFire(modelM[curModel].ID) }
			}
			if modelM[curModel].Status == Rating {
				onClick={ redirectTo(fmt.Sprintf("/feedback/%s", modelM[curModel].ID)) }
			}
			data-twe-toggle="tooltip"
			data-twe-placement="right"
			data-twe-ripple-init
			data-twe-ripple-color="light"
			title={ modelM[curModel].Status.ToolTip() }
		>
			{ modelM[curModel].Name }
		</button>
		if len(graphM[curModel]) > 0 {
			<ul>
				for _, child := range graphM[curModel] {
					@tree(modelM, graphM, child.ID)
				}
			</ul>
		}
	</li>
}

func graph(models []ModelNode) (map[string]*ModelNode, map[string][]*ModelNode, string) {
	graphM := make(map[string][]*ModelNode)
	modelM := make(map[string]*ModelNode)

	for i := range models {
		graphM[models[i].ID] = []*ModelNode{}
		modelM[models[i].ID] = &models[i]
	}

	var rootID string
	for i, model := range models {
		if model.Parent == nil || graphM[*model.Parent] == nil {
			rootID = model.ID
			continue
		}

		graphM[*model.Parent] = append(graphM[*model.Parent], &models[i])
	}

	return modelM, graphM, rootID
}

templ swalStyle(model *ModelNode) {
	<template id={ fmt.Sprintf("model-%s", model.ID) }>
		<swal-title>
			<span class="text-blue-600">{ model.Name }</span>
		</swal-title>
		<swal-html>
			<p>Finetune or inference using this model</p>
		</swal-html>
		<swal-button type="confirm" color="#36D399">
			Finetune
		</swal-button>
		<swal-button type="deny" color="#CC009C">
			Inference
		</swal-button>
		<swal-button type="cancel">
			Cancel
		</swal-button>
	</template>
}

templ treeStyle() {
	<style type="text/css">
        .tree,
        .tree ul,
        .tree li {
            list-style: none;
            margin: 0;
            padding: 0;
            position: relative;
        }
        .tree {
            margin: 0 0 1em;
            text-align: center;
        }
        .tree,
        .tree ul {
            display: table;
        }
        .tree ul {
            width: 100%;
        }
        .tree li {
            display: table-cell;
            padding: .5em 0;
            vertical-align: top;
        }
        .tree li:before {
            outline: solid 1px #666;
            content: "";
            left: 0;
            position: absolute;
            right: 0;
            top: 0;
        }
        .tree li:first-child:before {
            left: 50%;
        }
        .tree li:last-child:before {
            right: 50%;
        }
        .tree code,
        .tree button {
            border: solid .1em #666;
            border-radius: .2em;
            display: inline-block;
            margin: 0 .2em .5em;
            padding: .2em .5em;
            position: relative;
        }
        .tree ul:before,
        .tree code:before,
        .tree button:before {
            outline: solid 1px #666;
            content: "";
            height: .5em;
            left: 50%;
            position: absolute;
        }
        .tree ul:before {
            top: -.5em;
        }
        .tree code:before,
        .tree button:before {
            top: -.55em;
        }
        .tree>li {
            margin-top: 0;
        }
        .tree>li:before,
        .tree>li:after,
        .tree>li>code:before,
        .tree>li>button:before {
            outline: none;
        }
    </style>
}
