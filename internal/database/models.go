// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package database

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type TaskVariant string

const (
	TaskVariantInference TaskVariant = "inference"
	TaskVariantSample    TaskVariant = "sample"
	TaskVariantFinetune  TaskVariant = "finetune"
)

func (e *TaskVariant) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TaskVariant(s)
	case string:
		*e = TaskVariant(s)
	default:
		return fmt.Errorf("unsupported scan type for TaskVariant: %T", src)
	}
	return nil
}

type NullTaskVariant struct {
	TaskVariant TaskVariant
	Valid       bool // Valid is true if TaskVariant is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTaskVariant) Scan(value interface{}) error {
	if value == nil {
		ns.TaskVariant, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TaskVariant.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTaskVariant) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TaskVariant), nil
}

type Asset struct {
	TaskID   string
	Order    int16
	Image    []byte
	ImageUrl string
	Mask     []byte
	MaskUrl  string
}

type BaseAsset struct {
	ID       string
	Image    []byte
	ImageUrl string
	Mask     []byte
	MaskUrl  string
	Domain   string
}

type Inference struct {
	ID        string
	Image     []byte
	ImageUrl  string
	Mask      []byte
	MaskUrl   string
	Output    []byte
	OutputUrl string
	FromModel string
}

type Model struct {
	ID        string
	Domain    string
	Name      string
	Base      string
	Ckpt      []byte
	CreatedAt pgtype.Timestamp
}

type Task struct {
	ID            string
	SourceModelID string
	OutputModelID pgtype.Text
	TaskType      TaskVariant
	CreatedAt     pgtype.Timestamp
	HandledAt     pgtype.Timestamp
	FinishedAt    pgtype.Timestamp
	HumanPrefs    []byte
	PromptEmbeds  []byte
	Latents       []byte
	Timesteps     []byte
	NextLatents   []byte
	ImageTorchs   []byte
}
