// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package entity

import (
	"errors"
	"fmt"
)

const (
	// DomainOutpaint is a Domain of type Outpaint.
	DomainOutpaint Domain = iota
	// DomainSessile is a Domain of type Sessile.
	DomainSessile
	// DomainPedunculated is a Domain of type Pedunculated.
	DomainPedunculated
)

var ErrInvalidDomain = errors.New("not a valid Domain")

const _DomainName = "outpaintsessilepedunculated"

// DomainValues returns a list of the values for Domain
func DomainValues() []Domain {
	return []Domain{
		DomainOutpaint,
		DomainSessile,
		DomainPedunculated,
	}
}

var _DomainMap = map[Domain]string{
	DomainOutpaint:     _DomainName[0:8],
	DomainSessile:      _DomainName[8:15],
	DomainPedunculated: _DomainName[15:27],
}

// String implements the Stringer interface.
func (x Domain) String() string {
	if str, ok := _DomainMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Domain(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Domain) IsValid() bool {
	_, ok := _DomainMap[x]
	return ok
}

var _DomainValue = map[string]Domain{
	_DomainName[0:8]:   DomainOutpaint,
	_DomainName[8:15]:  DomainSessile,
	_DomainName[15:27]: DomainPedunculated,
}

// ParseDomain attempts to convert a string to a Domain.
func ParseDomain(name string) (Domain, error) {
	if x, ok := _DomainValue[name]; ok {
		return x, nil
	}
	return Domain(0), fmt.Errorf("%s is %w", name, ErrInvalidDomain)
}

// MarshalText implements the text marshaller method.
func (x Domain) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Domain) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseDomain(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
